{
  "rules": {
    "users" : {
      ".read" : "true",
      "$uid" : {
        // Anyone can see anyone's name and photo
        "name" : {
          ".read": true,
          ".write": "auth != null && auth.uid == $uid",
          ".validate": "newData.isString()"
        },
        "photo" : {
          ".read": true,
          ".write": "auth != null && auth.uid == $uid",
          ".validate": "newData.isString()"
        },

        // Only users can see their email
        "email" : {
          ".read": "auth != null && auth.uid == $uid",
          ".write": "auth != null && auth.uid == $uid",
          ".validate": "newData.isString()"
        },

        "data" : {
          // Only users can see their data
          ".read": "auth != null && auth.uid == $uid",

          "starredRecipes" : {
            // Post must exist, star must be an add or delete, and value
            // is timestamp when it was added
            "$recipe" : {
            	".write": "auth != null && auth.uid == $uid &&
              						(!data.exists() || !newData.exists())",
              ".validate": "root.child('posts').hasChild($recipe) &&
                						newData.isNumber()"
            },
          },
					
          // TODO: remove after transitioning to 'starred'
          "favoriteRecipes" : {
            // Post must exist, favorite must be an add or delete, and value
            // is timestamp when it was added
            "$recipe" : {
            	".write": "auth != null && auth.uid == $uid &&
              						(!data.exists() || !newData.exists())",
              ".validate": "root.child('posts').hasChild($recipe) &&
                						newData.isNumber()"
            },
          },

          "wishRecipes" : {
            "$wish" : {
            	".write": "auth != null && auth.uid == $uid",
              ".validate" : "newData.hasChild('idea')",
              "idea" : { ".validate" : "newData.isString()" },
              "notes" : { ".validate" : "newData.isString()" }
              // "$other" : { ".validate" : "false" }
            }
          }
        }
      }
    },
    
    "posts" : {
      ".read": true,
      ".indexOn": ["timestamp"],

      "$post" : {
        // Post exists: make sure editor was the original author
        ".write": "auth != null && (!data.exists() || data.child('author').val() == auth.uid) && newData.child('author').val() == auth.uid",
        
        // Either instructions and ingredients must both be present or
        // neither must be present.
        ".validate": "newData.hasChildren([
                        'activeTime',
                        'author',
                        'description',
                        'downtime',
                        'easiness',
                        'servings',
                        'sourceType',
                        'tastiness',
                        'title',
                        'timestamp'
                      ]) &&
                      (newData.hasChildren(['instructions', 'ingredients']) ||
                      	(!newData.hasChild('instructions') && !newData.hasChild('ingredients')))",
        
        // TODO: unclear how to validate urls
        "activeTime" : { ".validate" : "newData.isNumber() && newData.val() > 0"},
        // Users can only author their own posts
        "author" : { ".validate" : "newData.val() == auth.uid" },
        "coverImageAlt" : { ".validate" : "newData.isString()" },
        "coverImageURL" : { ".validate" : "newData.isString()" },
        "description" : { ".validate" : "newData.isString()" },
        "downtime" : { ".validate" : "newData.isNumber() && newData.val() >= 0" },
        "easiness" : { ".validate" : "newData.isNumber() && newData.val() >= 1 && newData.val() <= 10" },
        "gallery" : { "$image" : { ".validate" : "!newData.exists() || newData.isString()" } },
        "servings" : { ".validate" : "newData.isNumber() && newData.val() >= 1" },
        "source" : { ".validate" : "newData.isString()" },
      	"sourceType" : {
          ".validate" : "newData.isString() && (newData.val() == 'web' || newData.val() == 'personal' || newData.val() == 'cookbook')"
        },
        "tastiness" : { ".validate" : "newData.isNumber() && newData.val() >= 1 && newData.val() <= 10" },
        "title" : { ".validate" : "newData.isString()" },
        // Firebase timestamping mechanism must be used
        "timestamp" : { ".validate" : "newData.isNumber()"}, // && newData.val() === now" },

        // Personal recipe validation
        "ingredients" : {
          "$ingredient" : {
            ".validate" : "newData.hasChildren(['name', 'amount'])",
            "name" : { ".validate" : "newData.isString()" },
            "amount" : { ".validate" : "newData.isString()" }
          }
        },
        "instructions" : {
          "$instruction" : { ".validate" : "newData.isString()" }
        },
        
        // No other children allowed
        "$other": { ".validate": false }
      }
    }
  }
}
